// Code generated by MockGen. DO NOT EDIT.
// Source: pubsub.go

// Package pubsub is a generated GoMock package.
package pubsub

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPubSub is a mock of IPubSub interface.
type MockIPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockIPubSubMockRecorder
}

// MockIPubSubMockRecorder is the mock recorder for MockIPubSub.
type MockIPubSubMockRecorder struct {
	mock *MockIPubSub
}

// NewMockIPubSub creates a new mock instance.
func NewMockIPubSub(ctrl *gomock.Controller) *MockIPubSub {
	mock := &MockIPubSub{ctrl: ctrl}
	mock.recorder = &MockIPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPubSub) EXPECT() *MockIPubSubMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockIPubSub) Publish(event CommentEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", event)
}

// Publish indicates an expected call of Publish.
func (mr *MockIPubSubMockRecorder) Publish(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIPubSub)(nil).Publish), event)
}

// Subscribe mocks base method.
func (m *MockIPubSub) Subscribe(keyId string) Subscriber {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", keyId)
	ret0, _ := ret[0].(Subscriber)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIPubSubMockRecorder) Subscribe(keyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIPubSub)(nil).Subscribe), keyId)
}

// Unsubscribe mocks base method.
func (m *MockIPubSub) Unsubscribe(keyId string, sub Subscriber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", keyId, sub)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockIPubSubMockRecorder) Unsubscribe(keyId, sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockIPubSub)(nil).Unsubscribe), keyId, sub)
}
