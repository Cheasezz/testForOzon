package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"

	"github.com/Cheasezz/testForOzon/internal/core"
	"github.com/google/uuid"
)

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID uuid.UUID) (<-chan *core.Comment, error) {
	fmt.Printf("CommentAdded Sunbscription call")
	sub := r.env.PubSub.Subscribe(postID.String())
	
	commentsChan := make(chan *core.Comment, 10)

	// Горутина для отписки и закрытия канала, когда контекст завершается
	go func() {
		<-ctx.Done()
		r.env.PubSub.Unsubscribe(postID.String(), sub)
		close(commentsChan)
	}()

	// Горутина для чтения событий из канала подписки и пересылки их в commentsChan
	go func() {
		for event := range sub {
			comment, ok := event.Comment.(*core.Comment)
			if !ok {
				fmt.Printf("unexpected type in comment event\n")
				continue
			}

			select {
			case commentsChan <- comment:
			case <-ctx.Done():
				return
			}
		}
	}()

	return commentsChan, nil
}
