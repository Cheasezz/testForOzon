// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	core "github.com/Cheasezz/testForOzon/internal/core"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPostRepo is a mock of PostRepo interface.
type MockPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepoMockRecorder
}

// MockPostRepoMockRecorder is the mock recorder for MockPostRepo.
type MockPostRepoMockRecorder struct {
	mock *MockPostRepo
}

// NewMockPostRepo creates a new mock instance.
func NewMockPostRepo(ctrl *gomock.Controller) *MockPostRepo {
	mock := &MockPostRepo{ctrl: ctrl}
	mock.recorder = &MockPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepo) EXPECT() *MockPostRepoMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostRepo) CreatePost(ctx context.Context, post core.Post) (*core.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(*core.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostRepoMockRecorder) CreatePost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostRepo)(nil).CreatePost), ctx, post)
}

// GetPost mocks base method.
func (m *MockPostRepo) GetPost(ctx context.Context, postId uuid.UUID) (*core.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, postId)
	ret0, _ := ret[0].(*core.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostRepoMockRecorder) GetPost(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostRepo)(nil).GetPost), ctx, postId)
}

// GetPosts mocks base method.
func (m *MockPostRepo) GetPosts(ctx context.Context, limit, offset int) ([]*core.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx, limit, offset)
	ret0, _ := ret[0].([]*core.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostRepoMockRecorder) GetPosts(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostRepo)(nil).GetPosts), ctx, limit, offset)
}

// MockCommentRepo is a mock of CommentRepo interface.
type MockCommentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepoMockRecorder
}

// MockCommentRepoMockRecorder is the mock recorder for MockCommentRepo.
type MockCommentRepoMockRecorder struct {
	mock *MockCommentRepo
}

// NewMockCommentRepo creates a new mock instance.
func NewMockCommentRepo(ctrl *gomock.Controller) *MockCommentRepo {
	mock := &MockCommentRepo{ctrl: ctrl}
	mock.recorder = &MockCommentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepo) EXPECT() *MockCommentRepoMockRecorder {
	return m.recorder
}

// CommentForPostAllowed mocks base method.
func (m *MockCommentRepo) CommentForPostAllowed(ctx context.Context, postId uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentForPostAllowed", ctx, postId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentForPostAllowed indicates an expected call of CommentForPostAllowed.
func (mr *MockCommentRepoMockRecorder) CommentForPostAllowed(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentForPostAllowed", reflect.TypeOf((*MockCommentRepo)(nil).CommentForPostAllowed), ctx, postId)
}

// CreateComment mocks base method.
func (m *MockCommentRepo) CreateComment(ctx context.Context, comment core.Comment) (*core.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(*core.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentRepoMockRecorder) CreateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentRepo)(nil).CreateComment), ctx, comment)
}

// GetRepliesById mocks base method.
func (m *MockCommentRepo) GetRepliesById(ctx context.Context, parentCommentId uuid.UUID, limit, offset int) ([]*core.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesById", ctx, parentCommentId, limit, offset)
	ret0, _ := ret[0].([]*core.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesById indicates an expected call of GetRepliesById.
func (mr *MockCommentRepoMockRecorder) GetRepliesById(ctx, parentCommentId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesById", reflect.TypeOf((*MockCommentRepo)(nil).GetRepliesById), ctx, parentCommentId, limit, offset)
}

// GetRepliesCounts mocks base method.
func (m *MockCommentRepo) GetRepliesCounts(ctx context.Context, ids []uuid.UUID) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesCounts", ctx, ids)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesCounts indicates an expected call of GetRepliesCounts.
func (mr *MockCommentRepoMockRecorder) GetRepliesCounts(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesCounts", reflect.TypeOf((*MockCommentRepo)(nil).GetRepliesCounts), ctx, ids)
}

// GetRootComments mocks base method.
func (m *MockCommentRepo) GetRootComments(ctx context.Context, postId uuid.UUID, limit, offset int) ([]*core.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootComments", ctx, postId, limit, offset)
	ret0, _ := ret[0].([]*core.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootComments indicates an expected call of GetRootComments.
func (mr *MockCommentRepoMockRecorder) GetRootComments(ctx, postId, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootComments", reflect.TypeOf((*MockCommentRepo)(nil).GetRootComments), ctx, postId, limit, offset)
}

// RepliesCount mocks base method.
func (m *MockCommentRepo) RepliesCount(ctx context.Context, commentId uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepliesCount", ctx, commentId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepliesCount indicates an expected call of RepliesCount.
func (mr *MockCommentRepoMockRecorder) RepliesCount(ctx, commentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepliesCount", reflect.TypeOf((*MockCommentRepo)(nil).RepliesCount), ctx, commentId)
}
